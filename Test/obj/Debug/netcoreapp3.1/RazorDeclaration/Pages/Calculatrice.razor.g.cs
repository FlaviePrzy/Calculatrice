#pragma checksum "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/Pages/Calculatrice.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b1d1cfee5fc8d41af9e86eb3757ac12d60ce583e"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Test.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using Test;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/_Imports.razor"
using Test.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Calculatrice")]
    public partial class Calculatrice : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 42 "/Users/przybylskiflavie/Documents/GitHub/Calculatrice/Test/Pages/Calculatrice.razor"
           
        private float variableglobale = 0;
        private float total = 0;
        private float test = 0;
        Boolean itworks = false;
        private int clique = 0;
        private int operateur = -1;
        Boolean addition = false;

        private int prec_operateur = -1;
        private int cpt = 0;
        String calcul = "";
        Boolean debut = true;
        Boolean reco = true;

        private void egal()
        {

            calcul = calcul + variableglobale + " = ";
            switch (operateur)
            {
                case 1:
                    total = total + variableglobale;
                    break;
                case 2:
                    total = total - variableglobale;
                    break;
                case 3:
                    total = total * variableglobale;
                    break;
                case 4:
                    total = total / variableglobale;
                    break;
            }


            addition = false;
            debut = true;
            variableglobale = total;
            reco = true;
            itworks = true;
        }

        private void signe()
        {
            variableglobale = -variableglobale;
            total = variableglobale;
        }

        private void virgule()
        {

        }

        private void pourcentage()
        {
            variableglobale = (variableglobale / 100);
            total = variableglobale;
        }

        private void division()
        {
            if (debut == true && reco == false)
            {
                calcul = variableglobale.ToString() + "/";
                debut = false;

            }
            else
            {
                if (itworks == true)
                {
                    calcul = "";
                    itworks = false;
                }

                calcul = calcul + variableglobale.ToString() + "/";
            }

            operateur = 4;
            cpt++;

            if (addition == false)
            {
                total = variableglobale;
                variableglobale = 0;
                addition = true;
            }
            else
            {
                switch (prec_operateur)
                {
                    case 1:
                        total = total + variableglobale;
                        break;
                    case 2:
                        total = total - variableglobale;
                        break;
                    case 3:
                        total = total * variableglobale;
                        break;
                    case 4:
                        total = total / variableglobale;
                        break;
                }
            }

            variableglobale = 0;
            prec_operateur = operateur;
        }


        private void fois()
        {
            if (debut == true && reco == false)
            {
                calcul = variableglobale.ToString() + "*";
                debut = false;
            }
            else
            {
                if (itworks == true)
                {
                    calcul = "";
                    itworks = false;
                }
                calcul = calcul + variableglobale.ToString() + "*";
            }

            operateur = 3;
            cpt++;

            if (addition == false)
            {
                total = variableglobale;
                variableglobale = 0;
                addition = true;
            }
            else
            {
                switch (prec_operateur)
                {
                    case 1:
                        total = total + variableglobale;
                        break;
                    case 2:
                        total = total - variableglobale;
                        break;
                    case 3:
                        total = total * variableglobale;
                        break;
                    case 4:
                        total = total / variableglobale;
                        break;
                }
            }

            variableglobale = 0;
            prec_operateur = operateur;

        }

        private void ac()
        {
            variableglobale = 0;
            total = 0;
            calcul = " ";
        }

        private void moins()
        {
            if (debut == true && reco == false)
            {
                calcul = variableglobale.ToString() + " - ";
                debut = false;
            }
            else
            {
                if (itworks == true)
                {
                    calcul = "";
                    itworks = false;
                }
                calcul = calcul + variableglobale.ToString() + " - ";
            }

            operateur = 2;
            cpt++;

            if (addition == false)
            {
                total = variableglobale;
                variableglobale = 0;
                addition = true;

            }
            else
            {
                switch (prec_operateur)
                {
                    case 1:
                        total = total + variableglobale;
                        break;
                    case 2:
                        total = total - variableglobale;
                        break;
                    case 3:
                        total = total * variableglobale;
                        break;
                    case 4:
                        total = total / variableglobale;
                        break;
                }
            }
            prec_operateur = operateur;

            variableglobale = 0;
        }

        private void plus()
        {
            if (debut == true && reco == false)
            {
                calcul = variableglobale.ToString() + " + ";
                debut = false;
            }
            else
            {
                if (itworks == true)
                {
                    calcul = "";
                    itworks = false;
                }
                calcul = calcul + variableglobale.ToString() + " + ";
            }



            operateur = 1;
            cpt++;


            if (addition == false)
            {
                total = variableglobale;
                variableglobale = 0;
                addition = true;
            }
            else
            {
                switch (prec_operateur)
                {
                    case 1:
                        total = total + variableglobale;
                        break;
                    case 2:
                        total = total - variableglobale;
                        break;
                    case 3:
                        total = total * variableglobale;
                        break;
                    case 4:
                        total = total / variableglobale;
                        break;
                }


            }
            variableglobale = 0;
            prec_operateur = operateur;
        }

        private void zero()
        {
            int a = 0;
            variableglobale = variableglobale * 10 + a;

        }

        private void un()
        {
            int a = 1;
            variableglobale = variableglobale * 10 + a;

        }

        private void deux()
        {
            int a = 2;
            variableglobale = variableglobale * 10 + a;

        }

        private void trois()
        {
            int a = 3;
            variableglobale = variableglobale * 10 + a;

        }

        private void quatre()
        {
            int a = 4;
            variableglobale = variableglobale * 10 + a;
        }

        private void cinq()
        {
            int a = 5;
            variableglobale = variableglobale * 10 + a;
        }

        private void six()
        {
            int a = 6;
            variableglobale = variableglobale * 10 + a;
        }

        private void sept()
        {
            int a = 7;
            variableglobale = variableglobale * 10 + a;
        }

        private void huit()
        {
            int a = 8;
            variableglobale = variableglobale * 10 + a;
        }

        private void neuf()
        {
            int a = 9;
            variableglobale = variableglobale * 10 + a;
        }



    

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
